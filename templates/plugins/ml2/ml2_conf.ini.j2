# {{ ansible_managed }}

# ML2 general
[ml2]
type_drivers = {{ neutron_plugins[neutron_plugin_type].drivers_type }}
tenant_network_types = {{ neutron_provider_networks.network_types if neutron_provider_networks.network_types != '' else 'local' }}
mechanism_drivers = {{ neutron_ml2_mechanism_drivers }}
extension_drivers = port_security{% if 'qos' in neutron_plugin_base %},qos{% endif %}{% if 'dns' in neutron_plugin_base %},dns{% endif %}

{% if neutron_plugin_type == 'ml2.opendaylight' and ('odl-router_v2' in neutron_plugin_base or 'odl-router' in neutron_plugin_base) %}
bridge_mappings = {{ neutron_provider_networks.network_mappings }}
{% endif %}

{% if neutron_provider_networks.network_flat_networks is defined %}

# ML2 flat networks
[ml2_type_flat]
flat_networks = {{ neutron_provider_networks.network_flat_networks }}

{% endif %}

{% if neutron_provider_networks.network_vlan_ranges is defined %}

# ML2 VLAN networks
[ml2_type_vlan]
network_vlan_ranges = {{ neutron_provider_networks.network_vlan_ranges }}

{% endif %}

{% if neutron_provider_networks.network_vxlan_ranges is defined %}

# ML2 VXLAN networks
[ml2_type_vxlan]
vxlan_group = {{ neutron_vxlan_group }}
vni_ranges = {{ neutron_provider_networks.network_vxlan_ranges }}

{% endif %}

# Security groups
[securitygroup]
{% if neutron_plugin_type == 'ml2.ovs' %}
firewall_driver = iptables_hybrid
{% endif %}
enable_security_group = True
enable_ipset = True

{% if neutron_plugins[neutron_plugin_type].driver_interface == 'vpp' %}
[ml2_vpp]
jwt_signing = False
#etcd_ca_cert = /etc/ssl/etcd/ca.crt
etcd_insecure_explicit_disable_https = True
gpe_locators = physnet1
gpe_src_cidr = 192.168.10.10/24
enable_vpp_restart = False
etcd_pass =
etcd_user =
etcd_port = 2379
# TODO: still need to figure out how to get a list of etcd containers in case of ha cluster
etcd_host = {% for host in groups['etcd_container'] %}{{ hostvars[host]['container_address'] }}{% if not loop.last %},{% endif %}{% endfor %}

{% if neutron_provider_networks.network_mappings is defined %}
{% set vpp_interface = neutron_provider_networks.network_mappings.split(':')[1] %}
{% endif %}
physnets = physnet1:host-{{ vpp_interface_vlan[0] }}
{% endif %}
