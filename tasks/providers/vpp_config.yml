---
# Copyright 2017, Cisco Systems
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Install VPP repo
  apt_repository:
    repo: deb [trusted=yes] https://nexus.fd.io/content/repositories/fd.io.master.ubuntu.xenial.main/ ./
    state: present
    filename: 99-fdio
  when:
    - neutron_services['neutron-vpp-agent']['group'] in group_names
  tags:
    - vpp-install

- name: Install VPP package
  package:
    name: "vpp"
    state: latest
    update_cache: yes
    cache_valid_time: 600
  when:
    - neutron_services['neutron-vpp-agent']['group'] in group_names
  tags:
    - vpp-install

- name: Install VPP python API package
  package:
    name: "vpp-api-python"
    state: latest
    update_cache: yes
    cache_valid_time: 600
  when:
    - neutron_services['neutron-vpp-agent']['group'] in group_names
  tags:
    - vpp-install

- name: Install VPP plugins package
  package:
    name: "vpp-plugins"
    state: latest
    update_cache: yes
    cache_valid_time: 600
  when:
    - neutron_services['neutron-vpp-agent']['group'] in group_names
  tags:
    - vpp-install

- name: Install dmidecode package
  package:
    name: "dmidecode"
    state: latest
    update_cache: yes
    cache_valid_time: 600
  when:
    - neutron_services['neutron-vpp-agent']['group'] in group_names
  tags:
    - vpp-install

- name: Install bridge-utils package
  package:
    name: "bridge-utils"
    state: latest
    update_cache: yes
    cache_valid_time: 600
  when:
    - neutron_services['neutron-vpp-agent']['group'] in group_names
  tags:
    - vpp-install

- name: Install networking-vpp pip packages
  pip:
    name: "{{ neutron_optional_vpp_pip_packages }}"
    state: "{{ neutron_pip_package_state }}"
    virtualenv: "{{ neutron_bin | dirname }}"
    virtualenv_site_packages: "no"
    extra_args: >-
      {{ neutron_developer_mode | ternary(pip_install_developer_constraints | default('--constraint /opt/developer-pip-constraints.txt'), '') }}
      {{ (pip_install_upper_constraints is defined) | ternary('--constraint ' + pip_install_upper_constraints | default(''),'') }}
      {{ pip_install_options | default('') }}
  register: install_packages
  until: install_packages|success
  retries: 5
  delay: 2
  tags:
    - vpp-install
    - vpp-pip-packages

- debug:
    msg: "vpp_provider_config: containers_networks = {{ container_networks }}"

- debug:
    msg: "vpp_provider_config: group_name = {{ group_names }}"

- name: set vpp interface vlan
  set_fact:
    vpp_interface_vlan: "{{ provider_networks | selectattr('network.type','equalto','flat') | map(attribute='network.container_interface') | list }}"
- name: set vpp interface vxlan
  set_fact:
    vpp_interface_vxlan: "{{ provider_networks | selectattr('network.type','equalto','vxlan') | map(attribute='network.container_interface') | list }}"
- name: set vpp interface flat
  set_fact:
    vpp_interface_flat: "{{ provider_networks | selectattr('network.type','equalto','vlan') | map(attribute='network.container_interface') | list }}"

- debug:
    msg: "vpp_provider_config: vpp_interface_vlan = {{ vpp_interface_vlan }}"
- debug:
    msg: "vpp_provider_config: vpp_interface_vxlan = {{ vpp_interface_vxlan }}"
- debug:
    msg: "vpp_provider_config: vpp_interface_flat = {{ vpp_interface_flat }}"

- name: Drop vpp startup config script
  template:
    src: templates/vpp_startup-config.j2
    dest: /etc/vpp/startup-config
  when:
    - neutron_services['neutron-vpp-agent']['group'] in group_names

- name: Drop vpp startup configuration
  template:
    src: templates/vpp_startup.conf.j2
    dest: /etc/vpp/startup.conf
  when:
    - neutron_services['neutron-vpp-agent']['group'] in group_names

- name: vpp service is restarted
  service:
    name: vpp
    state: restarted
  when:
    - neutron_services['neutron-vpp-agent']['group'] in group_names

- name: libvirtd service is restarted
  service:
    name: libvirtd
    state: restarted
  when:
    - "'compute_hosts' in group_names"

- name: nova-compute service is restarted
  service:
    name: nova-compute
    state: restarted
  when:
    - "'compute_hosts' in group_names"
